apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "github-actions-runner.fullname" . }}
  labels:
    {{- include "github-actions-runner.labels" . | nindent 4 }}
data:
  mirrors.eskip: |-
    healthz: Path("/healthz") -> inlineContent("ok")
        -> disableAccessLog() -> <shunt>;
    default: * -> redirectTo(301) -> <shunt>;

  mirrors.json: |-
    {
      "distSpecVersion": "1.1.0",
      "storage": {
        "rootDirectory": "/var/lib/registry",
        "commit": true,
        "gc": true,
        "gcDelay": "1h",
        "gcInterval": "12h"
      },
      "http": {
        "address": "0.0.0.0", "port": "8443",
        "tls": {
          "cert":"/etc/registry-tls/tls.crt",
          "key":"/etc/registry-tls/tls.key"
        }
      },
      "log": { "level": "warn" },
      "extensions": {
        "metrics": {
          "enable": true,
          "prometheus": {
            "path": "/metrics"
          }
        },
        "sync": {
          "enable": true,
          "credentialsFile": "/etc/credentials/credentials.json",
          "registries": [
            {{- range $inx, $val := .Values.mirrors.registry }}{{- if ne $val.host "docker.io" }}
            {
              "urls": ["https://{{ $val.host }}"],
              "tlsVerify": true,
              "onDemand": true,
              "maxRetries": 3,
              "retryDelay": "15m",
              "onlySigned": false,
              "content": [
                {
                  "prefix": "**",
                  "destination": "/{{ $val.host | replace "." "-" }}"
                }
              ]
            },
            {{- end }}{{- end }}
            {
              "urls": ["https://index.docker.io"],
              "tlsVerify": true,
              "onDemand": true,
              "maxRetries": 3,
              "retryDelay": "15m",
              "onlySigned": false,
              "content": [
                {
                  "prefix": "library/**",
                  "destination": "/docker-io"
                },
                {
                  "prefix": "**",
                  "destination": "/docker-io"
                },
                {
                  "prefix": "library/**"
                },
                {
                  "prefix": "moby/**"
                },
                {
                  "prefix": "docker/**"
                },
                {
                  "prefix": "multiarch/**"
                }
              ]
            }
          ]
        }
      }
    }

  registry.yaml: |-
    version: 0.1
    log:
      accesslog:
        disabled: true
      level: warn
      formatter: json
    storage:
      {{- if .Values.registry.storage }}
      {{- .Values.registry.storage | toYaml | nindent 6 }}
      {{- else }}
      maintenance:
        uploadpurging:
          enabled: true
          age: 72h
          interval: 4h
          dryrun: false
      filesystem:
        rootdirectory: /var/lib/registry
        maxthreads: 100
      delete:
        enabled: true
      {{- end }}
    http:
      addr: :8443
      # host: https://{{ include "github-actions-runner.fullname" . }}-registry.{{ .Release.Namespace }}.svc
      tls:
        certificate: /etc/registry-tls/tls.crt
        key: /etc/registry-tls/tls.key

  registry.json: |-
    {
      "distSpecVersion": "1.1.0",
      "storage": {
        "rootDirectory": "/var/lib/registry",
        "commit": true,
        "gc": true,
        "gcDelay": "2h",
        "gcInterval": "1h"
      },
      "http": {
        "address": "0.0.0.0", "port": "8443",
        "tls": {
          "cert":"/etc/registry-tls/tls.crt",
          "key":"/etc/registry-tls/tls.key"
        },
        "accessControl": {
          "repositories": {
            "**": {
              "anonymousPolicy": ["read", "create", "update", "delete"]
            }
          }
        }
      },
      "log": { "level": "debug" },
      "extensions": {
        "search": {
          "enable": true,
          "cve": {
            "updateInterval": "12h"
          }
        },
        "scrub": {
          "enable": true,
          "interval": "24h"
        },
        "metrics": {
          "enable": true,
          "prometheus": {
            "path": "/metrics"
          }
        }
      }
    }

  {{- $size := default 10 (include "resource-mb" .Values.dind.persistence.size) }}
  buildkitd.toml: |-
    root = "/var/lib/buildkit"
    debug = false

    [grpc]
      address = [ "unix:///run/buildkit/buildkitd.sock", "tcp://0.0.0.0:1234" ]
      uid = 0
      gid = 0

    [worker.containerd]
      enabled = false

    [worker.oci]
      enabled = true
      gc = true
      gckeepstorage = "{{ int64 (divf $size 2) }}MB"
    [[worker.oci.gcpolicy]]
      keepBytes = "{{ int64 (divf $size 2) }}MB"
      keepDuration = "24h"
      filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
    [[worker.oci.gcpolicy]]
      all = true
      keepBytes = "{{ int64 (divf $size 2) }}MB"

    {{- if .Values.mirrors.enabled }}
    {{ range $inx, $val := .Values.mirrors.registry }}
    [registry."{{ $val.host }}"]
      capabilities = ["pull", "resolve"]
      mirrors = ["{{ include "github-actions-runner.fullname" $ }}-mirrors.{{ $.Release.Namespace }}.svc/{{ $val.host | replace "." "-" }}"]
    {{- end }}
    [registry."{{ include "github-actions-runner.fullname" $ }}-mirrors.{{ $.Release.Namespace }}.svc"]
      ca = ["/etc/docker-tls/ca.crt"]
    {{- end }}

    {{- if .Values.registry.enabled }}
    [registry."{{ include "github-actions-runner.fullname" . }}-registry.{{ $.Release.Namespace }}.svc"]
      ca = ["/etc/docker-tls/ca.crt"]
    {{- if .Values.registry.ingress.enabled }}{{ range $inx, $val := .Values.registry.ingress.hosts }}
    [registry."{{ $val.host }}"]
      capabilities = ["pull", "resolve", "push"]
      mirrors = ["{{ include "github-actions-runner.fullname" $ }}-registry.{{ $.Release.Namespace }}.svc"]
      {{- if and $.Values.registry.ingress.auth (hasKey $.Values.registry.ingress.auth "key") }}
      [[registry."{{ $val.host }}".keypair]]
        key="{{ $.Values.registry.ingress.auth.key }}"
        cert="{{ $.Values.registry.ingress.auth.cert }}"
      {{- end }}
    {{- end }}{{- end }}
    {{- end }}

  daemon.json: |-
    {
      "features": {
        "buildkit" : true
      },
      "builder": {
        "gc": {
          "enabled": true,
          "defaultKeepStorage": "{{ int64 (divf $size 2) }}MB"
        }
      },
      "hosts": ["unix:///tmp/docker.sock"],
      "default-address-pools": [
        {"base": "198.18.9.0/16","size": 24}
      ],
      "mtu": 1280,
      {{- if .Values.mirrors.enabled }}
      "registry-mirrors": ["https://{{ include "github-actions-runner.fullname" $ }}-mirrors.{{ $.Release.Namespace }}.svc"],
      {{- end }}
      "insecure-registries": [
        "{{ include "github-actions-runner.fullname" $ }}-mirrors.{{ $.Release.Namespace }}.svc",
        "{{ include "github-actions-runner.fullname" . }}-registry.{{ .Release.Namespace }}.svc"
      ],
      "log-level": "warn"
    }

  mirrors.sh: |
    #!/bin/sh
    until docker ps; do sleep 1; done
    docker pull moby/buildkit:buildx-stable-1
    docker buildx create --name multiarch --driver docker-container --config /etc/docker-config/buildkitd.toml --use
    docker buildx inspect --bootstrap multiarch

    [ -n "$1" ] && exec $1 || /home/runner/run.sh

  proxy.sh: |
    #!/bin/sh
    rm -f /cache/squid.pid

    [ ! -d /cache/00 ] && squid -Nz -f /etc/proxy/proxy.conf
    exec squid -NY -f /etc/proxy/proxy.conf

  {{- $cachemem := default 256 (include "resource-mb" .Values.proxy.resources.requests.memory) }}
  {{- $cachesize := default 100 (include "resource-mb" .Values.proxy.persistence.size) }}
  proxy.conf: |
    acl clientnet src 10.0.0.0/8
    acl clientnet src 172.16.0.0/12
    acl clientnet src 192.168.0.0/16
    acl clientnet src fc00::/7

    acl SSL_ports port 443
    acl Safe_ports port 80
    acl Safe_ports port 443
    acl CONNECT method CONNECT

    httpd_suppress_version_string on
    forwarded_for off
    via off

    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_Ports
    http_access allow localhost manager
    http_access deny manager
    http_access deny to_localhost

    http_access allow clientnet
    http_access deny all

    http_port 3128
    # https_port 3129 tls-cert=/etc/certs/tls.crt tls-key=/etc/certs/tls.key

    cache_mem {{ sub $cachemem 32 }} MB
    cache_dir ufs /cache {{ $cachesize }} 16 256
    maximum_object_size 512 MB
    maximum_object_size_in_memory 8 MB

    # refresh_pattern [-i] regex min percent max
    refresh_pattern (InRelease|Release|Packages(.gz)*)$ 60     20%  2880
    refresh_pattern (\.deb|\.udeb|\.rpm)$               129600 100% 129600 ignore-reload ignore-no-store override-expire
    refresh_pattern .                                   0      20%  2880

    shutdown_lifetime 5 seconds

    logfile_rotate 0
    access_log stdio:/dev/stdout
    cache_log stdio:/dev/stdout
    pid_filename /cache/squid.pid
    netdb_filename stdio:/cache/netdb.state
    pinger_enable off
    coredump_dir /tmp
